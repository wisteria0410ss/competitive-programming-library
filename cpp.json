{
    "partially-persistent-unionfind": {
        "prefix": "partially-persistent-unionfind",
        "description": "競プロ用ライブラリ - partially-persistent-unionfind",
        "body": [
            "class unionfind{",
            "    int last;",
            "    int *parent, *time;",
            "    std::vector<std::pair<int, size_t>> *size;",
            "    const size_t length;",
            "public:",
            "    unionfind(size_t n): last(0), length(n){",
            "        parent = new int[n];",
            "        time = new int[n];",
            "        size = new std::vector<std::pair<int, size_t>>[n];",
            "        for(size_t i=0;i<n;++i){",
            "            parent[i] = 1;",
            "            time[i] = INT32_MAX;",
            "            size[i].emplace_back(0, 1);",
            "        }",
            "    }",
            "    size_t root(size_t v, int t){",
            "        if(time[v] > t) return v;",
            "        else return root(parent[v], t);",
            "    }",
            "    bool is_same(size_t u, size_t v, int t=-1){",
            "        if(t < 0) t = last;",
            "        return root(u, t) == root(v, t);",
            "    }",
            "    int merge(size_t u, size_t v){",
            "        int t = ++last;",
            "        u = root(u, t);",
            "        v = root(v, t);",
            "        if(u == v) return t;",
            "        if(parent[u] < parent[v]) std::swap(u, v);",
            "        parent[u] += parent[v];",
            "        size[u].emplace_back(t, parent[u]);",
            "        parent[v] = u;",
            "        time[v] = t;",
            "        return t;",
            "    }",
            "    size_t count(size_t v, int t=-1){",
            "        if(t < 0) t = last;",
            "        v = root(v, t);",
            "        return std::prev(std::lower_bound(size[v].begin(), size[v].end(), std::pair<int, size_t>{ t, length + 1 }))->second;",
            "    }",
            "};"
        ]
    },
    "segment-tree": {
        "prefix": "segment-tree",
        "description": "競プロ用ライブラリ - segment-tree",
        "body": [
            "template <typename Tp, typename Fp>",
            "class segment_tree{",
            "    Tp *tree;",
            "    const size_t len;",
            "    const Tp e;",
            "    const Fp f;",
            "public:",
            "    segment_tree(size_t n, const Tp &id, Fp fn, const Tp *values=nullptr): len(n), e(id), f(fn){",
            "        tree = new Tp[n<<1];",
            "        for(size_t i=0; i<n; ++i) tree[n+i] = values ? values[i] : id;",
            "        for(size_t i=n-1; i>0; --i) tree[i] = fn(tree[i<<1 | 0], tree[i<<1 | 1]);",
            "    }",
            "    void set(size_t pos, const Tp &val){",
            "        tree[pos += len] = val;",
            "        for(pos>>=1; pos>0; pos>>=1) tree[pos] = f(tree[pos<<1 | 0], tree[pos<<1 | 1]);",
            "    }",
            "    void add(size_t pos, const Tp &val){",
            "        set(pos, f(val, tree[len + pos]));",
            "    }",
            "    Tp get(size_t left, size_t right){",
            "        left += len; right += len;",
            "        Tp lval = e, rval = e;",
            "        while(left < right){",
            "            if(left  & 1) lval = f(lval, tree[left ++]);",
            "            if(right & 1) rval = f(tree[--right], rval);",
            "            left >>= 1; right >>= 1;",
            "        }",
            "        return f(lval, rval);",
            "    }",
            "};"
        ]
    },
    "lazy-segment-tree": {
        "prefix": "lazy-segment-tree",
        "description": "競プロ用ライブラリ - lazy-segment-tree",
        "body": [
            "template <typename Tp, typename Op>",
            "class segment_tree{",
            "    struct node{",
            "        Tp value;",
            "        Op operation;",
            "        size_t width;",
            "    } *tree;",
            "    const size_t length;",
            "    const Tp vid;",
            "    const Op oid;",
            "    Tp (*const merge)(const Tp &lhs, const Tp &rhs);",
            "    Op (*const composition)(const Op &lhs, const Op &rhs);",
            "    Tp (*const action)(const Op &f, const Tp &x, size_t width);",
            "",
            "    void evaluate(size_t pos){",
            "        if(tree[pos].operation == oid) return;",
            "        if(pos < length){",
            "            tree[pos<<1 | 0].operation = composition(tree[pos].operation, tree[pos<<1 | 0].operation);",
            "            tree[pos<<1 | 1].operation = composition(tree[pos].operation, tree[pos<<1 | 1].operation);",
            "        }",
            "        tree[pos].value = action(tree[pos].operation, tree[pos].value, tree[pos].width);",
            "        tree[pos].operation = oid;",
            "    }",
            "    void propagate(size_t left, size_t right){",
            "        for(int i = sizeof(unsigned int) * CHAR_BIT - __builtin_clz(left ) - 1; i > 0; --i) evaluate(left  >> i);",
            "        for(int i = sizeof(unsigned int) * CHAR_BIT - __builtin_clz(right) - 1; i > 0; --i) evaluate(right >> i);",
            "    }",
            "    void update(size_t left, size_t right){",
            "        for(left  >>= __builtin_ctz(left ) + 1; left ; left  >>= 1){",
            "            evaluate(left <<1 | 0);",
            "            evaluate(left <<1 | 1);",
            "            tree[left ].value = merge(tree[left <<1 | 0].value, tree[left <<1 | 1].value);",
            "        }",
            "        for(right >>= __builtin_ctz(right) + 1; right; right >>= 1){",
            "            evaluate(right <<1 | 0);",
            "            evaluate(right <<1 | 1);",
            "            tree[right].value = merge(tree[right<<1 | 0].value, tree[right<<1 | 1].value);",
            "        }",
            "    }",
            "public:",
            "    segment_tree(size_t n,",
            "        Tp e, Tp(*const fold)(const Tp&, const Tp&),",
            "        Op id, Op (*const compose)(const Op&, const Op&),",
            "        Tp (*const apply)(const Op&, const Tp&, size_t))",
            "    : length(n), vid(e), oid(id), merge(fold), composition(compose), action(apply){",
            "        tree = new node[n<<1];",
            "        for(size_t i = 1; i < (n<<1); ++i) tree[i] = { e, id, 1 };",
            "        for(size_t i = n - 1; i > 0; --i) tree[i].width = tree[i<<1 | 0].width + tree[i<<1 | 1].width;",
            "    }",
            "    void set(size_t left, size_t right, Op f){",
            "        if(left >= right) return;",
            "        size_t l, r;",
            "        l = left  = left  + length;",
            "        r = right = right + length;",
            "        propagate(left, right);",
            "        while(l < r){",
            "            if(l & 1){ tree[l].operation = composition(f, tree[l].operation); ++l; }",
            "            if(r & 1){ --r; tree[r].operation = composition(f, tree[r].operation); }",
            "            l >>= 1; r >>= 1;",
            "        }",
            "        update(left, right);",
            "    }",
            "    void init(Tp *val){",
            "        for(size_t i = 0; i < length; ++i) tree[length + i].value = val[i];",
            "        for(size_t i = length - 1; i > 0; --i) tree[i].value = merge(tree[i<<1 | 0].value, tree[i<<1 | 1].value);",
            "    }",
            "    Tp get(size_t left, size_t right){",
            "        if(left >= right) return vid;",
            "        left  += length;",
            "        right += length;",
            "        propagate(left, right);",
            "        Tp lval = vid, rval = vid;",
            "        while(left < right){",
            "            if(left  & 1){ evaluate(left ); lval = merge(lval, tree[left ].value); ++left ; }",
            "            if(right & 1){ --right; evaluate(right); rval = merge(tree[right].value, rval); }",
            "            left >>= 1; right >>= 1;",
            "        }",
            "        return merge(lval, rval);",
            "    }",
            "};"
        ]
    },
    "disjoint-sparse-table": {
        "prefix": "disjoint-sparse-table",
        "description": "競プロ用ライブラリ - disjoint-sparse-table",
        "body": [
            "template <typename Tp, typename Fp>",
            "class disjoint_sparse_table{",
            "    Tp **table;",
            "    Fp func;",
            "    size_t length, lg;",
            "public:",
            "    disjoint_sparse_table(size_t n, Tp *values, Fp f): length(n), func(f){",
            "        lg = CHAR_BIT * sizeof(int) - __builtin_clz(std::max((size_t)1, n-1));",
            "        table  = new Tp*[lg];",
            "        *table = new Tp[n * lg];",
            "        for(int i=1;i<lg;++i) table[i] = *table + n * i;",
            "        for(int i=0;i<n;++i) table[0][i] = values[i];",
            "        for(int s=1;s<lg;++s){",
            "            size_t w = 1<<s;",
            "            for(int i=0;i<n;i+=w<<1){",
            "                size_t l = std::min(i + w, n) - 1, r = i + w;",
            "                table[s][l] = values[l];",
            "                for(int j=l-1;j>=i;--j) table[s][j] = f(values[j], table[s][j+1]);",
            "                if(r >= n) continue;",
            "                table[s][r] = values[r];",
            "                for(int j=r+1;j<r+w && j<n;++j) table[s][j] = f(table[s][j-1], values[j]);",
            "            }",
            "        }",
            "    }",
            "    Tp get(size_t left, size_t right, Tp id=Tp{}){",
            "        if(left >= right || right > length) return id;",
            "        if(left + 1 == right) return table[0][left];",
            "        size_t s = CHAR_BIT * sizeof(int) - __builtin_clz(left ^ --right) - 1;",
            "        return func(table[s][left], table[s][right]);",
            "    }",
            "};"
        ]
    },
    "unionfind": {
        "prefix": "unionfind",
        "description": "競プロ用ライブラリ - unionfind",
        "body": [
            "class unionfind{",
            "    int *tree;",
            "    size_t length;",
            "    size_t root(size_t v){",
            "        if(tree[v] < 0) return v;",
            "        else return tree[v] = root(tree[v]);",
            "    }",
            "public:",
            "    unionfind(size_t n): length(n){",
            "        tree = new int[n];",
            "        for(size_t i=0;i<n;++i) tree[i] = -1;",
            "    }",
            "    size_t count(size_t v){",
            "        return -tree[root(v)];",
            "    }",
            "    bool is_same(size_t u, size_t v){",
            "        return root(u) == root(v);",
            "    }",
            "    bool merge(size_t u, size_t v){",
            "        u = root(u); v = root(v);",
            "        if(u == v) return false;",
            "        if(u > v) std::swap(u, v);",
            "        tree[u] += tree[v];",
            "        tree[v] = u;",
            "        return true;",
            "    }",
            "};"
        ]
    },
    "convolution": {
        "prefix": "convolution",
        "description": "競プロ用ライブラリ - convolution",
        "body": [
            "template <size_t n, uint32_t mod, uint32_t root>",
            "void ntt(const modint<mod> *input, modint<mod> *output, bool rev=false){",
            "    static_assert((n & n-1) == 0 && (mod - 1) % n == 0);",
            "    constexpr int st = __builtin_ctzll(n);",
            "    constexpr modint<mod> ninv = modint<mod>{n}.inverse();",
            "    static std::vector<modint<mod>> omega = [](){",
            "        std::vector<modint<mod>> ret;",
            "        ret.resize(n+1);",
            "        ret[0] = 1; if(n == 1) return ret;",
            "        ret[1] = pow(modint<mod>{root}, (mod - 1) / n);",
            "        for(size_t i=2;i<=n;++i) ret[i] = ret[i-1] * ret[1];",
            "        return ret;",
            "    }();",
            "",
            "    for(size_t i=0;i<n;++i) output[i] = rev ? input[i] * ninv : input[i];",
            "    for(int s = (rev ? st-1 : 0); rev ? s>=0 : s<st; rev ? --s : ++s){",
            "        const int h = n >> s+1, l = n >> s;",
            "        for(int b=0;b<(1<<s);++b){",
            "            for(int i=0;i<h;++i){",
            "                const modint<mod> x = output[l*b+i], y = rev ? output[l*b+h+i] * omega[n - (i << s)] : output[l*b+h+i];",
            "                output[l*b  +i] = x + y;",
            "                output[l*b+h+i] = rev ? x - y : (x - y) * omega[i << s];",
            "            }",
            "        }",
            "    }",
            "};",
            "",
            "template <size_t n, uint32_t mod, uint32_t root>",
            "void convolution(const modint<mod> *lhs, const modint<mod> *rhs, modint<mod> *output){",
            "    static modint<mod> w[n];",
            "    ntt<n, mod, root>(lhs, output);",
            "    ntt<n, mod, root>(rhs, w);",
            "    for(size_t i=0;i<n;++i) w[i] *= output[i];",
            "    ntt<n, mod, root>(w, output, true);",
            "}"
        ]
    },
    "modint": {
        "prefix": "modint",
        "description": "競プロ用ライブラリ - modint",
        "body": [
            "template <uint32_t mod>",
            "class modint{",
            "    uint64_t value;",
            "public:",
            "    constexpr modint(const int64_t x=0) noexcept: value(x % mod + (x < 0 ? mod : 0)){ }",
            "    constexpr explicit operator uint64_t() const noexcept{ return value; }",
            "    constexpr modint inverse() const noexcept{ return pow(*this, mod-2); }",
            "    constexpr bool operator==(const modint &rhs) const noexcept{ return value == rhs.value; }",
            "    constexpr bool operator!=(const modint &rhs) const noexcept{ return value != rhs.value; }",
            "    constexpr modint operator+() const noexcept{ return modint(*this); }",
            "    constexpr modint operator-() const noexcept{ return modint(mod - value); }",
            "    constexpr modint operator+(const modint &rhs) const noexcept{ return modint(*this) += rhs; }",
            "    constexpr modint operator-(const modint &rhs) const noexcept{ return modint(*this) -= rhs; }",
            "    constexpr modint operator*(const modint &rhs) const noexcept{ return modint(*this) *= rhs; }",
            "    constexpr modint operator/(const modint &rhs) const noexcept{ return modint(*this) /= rhs; }",
            "    constexpr modint &operator+=(const modint &rhs) noexcept{",
            "        if((value += rhs.value) >= mod) value -= mod;",
            "        return *this;",
            "    }",
            "    constexpr modint &operator-=(const modint &rhs) noexcept{ return *this += mod - rhs.value; }",
            "    constexpr modint &operator*=(const modint &rhs) noexcept{",
            "        if((value *= rhs.value) >= mod) value %= mod;",
            "        return *this;",
            "    }",
            "    constexpr modint &operator/=(const modint &rhs) noexcept{ return *this *= rhs.inverse(); }",
            "    constexpr modint operator++(int) noexcept{",
            "        modint ret(*this);",
            "        if((++value) >= mod) value -= mod;",
            "        return ret;",
            "    }",
            "    constexpr modint operator--(int) noexcept{",
            "        modint ret(*this);",
            "        if((value += mod - 1) >= mod) value -= mod;",
            "        return ret;",
            "    }",
            "    constexpr modint &operator++() noexcept{ return *this += 1; }",
            "    constexpr modint &operator--() noexcept{ return *this -= 1; }",
            "    friend std::ostream &operator<<(std::ostream &os, const modint<mod> &x){ return os << x.value; }",
            "    friend std::istream &operator>>(std::istream &is, modint<mod> &x){",
            "        int64_t i;",
            "        is >> i;",
            "        x = modint<mod>(i);",
            "        return is;",
            "    }",
            "    friend constexpr modint<mod> pow(const modint<mod> &x, uint64_t y){",
            "        modint<mod> ret{1}, m{x};",
            "        while(y > 0){",
            "            if(y & 1) ret *= m;",
            "            m *= m;",
            "            y >>= 1;",
            "        }",
            "        return ret;",
            "    }",
            "};"
        ]
    }
}